// Mocks generated by Mockito 5.4.5 from annotations
// in linkyou_task/test/domain/use_cases/login_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;


import 'package:linkyou_task/data/models/responses/tasks_response/tasks.dart'
    as _i9;
import 'package:linkyou_task/data/models/responses/tasks_response/tasks_response.dart'
    as _i8;
import 'package:linkyou_task/data/network/result.dart' as _i4;
import 'package:linkyou_task/domain/models/user_model.dart' as _i7;
import 'package:linkyou_task/domain/repository/repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i2.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }



  @override
  _i3.Future<_i4.Result<String?>> checkCachedUser() => (super.noSuchMethod(
        Invocation.method(
          #checkCachedUser,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<String?>>.value(
            _i6.dummyValue<_i4.Result<String?>>(
          this,
          Invocation.method(
            #checkCachedUser,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<String?>>);

  @override
  _i3.Future<_i4.Result<_i7.User>> getCachedUser() => (super.noSuchMethod(
        Invocation.method(
          #getCachedUser,
          [],
        ),
        returnValue: _i3.Future<_i4.Result<_i7.User>>.value(
            _i6.dummyValue<_i4.Result<_i7.User>>(
          this,
          Invocation.method(
            #getCachedUser,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i7.User>>);

  @override
  _i3.Future<_i4.Result<bool>> setCachedUser(
    _i7.User? user,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCachedUser,
          [
            user,
            token,
          ],
        ),
        returnValue:
            _i3.Future<_i4.Result<bool>>.value(_i6.dummyValue<_i4.Result<bool>>(
          this,
          Invocation.method(
            #setCachedUser,
            [
              user,
              token,
            ],
          ),
        )),
      ) as _i3.Future<_i4.Result<bool>>);

  @override
  _i3.Future<_i4.Result<_i8.TodoResponse?>> getToDo({
    required int? limit,
    required int? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getToDo,
          [],
          {
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue: _i3.Future<_i4.Result<_i8.TodoResponse?>>.value(
            _i6.dummyValue<_i4.Result<_i8.TodoResponse?>>(
          this,
          Invocation.method(
            #getToDo,
            [],
            {
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i3.Future<_i4.Result<_i8.TodoResponse?>>);

  @override
  _i3.Future<_i4.Result<_i9.Todos?>> updateTaskStatus(
    int? id,
    bool? isCompleted,
    String? todo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTaskStatus,
          [
            id,
            isCompleted,
            todo,
          ],
        ),
        returnValue: _i3.Future<_i4.Result<_i9.Todos?>>.value(
            _i6.dummyValue<_i4.Result<_i9.Todos?>>(
          this,
          Invocation.method(
            #updateTaskStatus,
            [
              id,
              isCompleted,
              todo,
            ],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i9.Todos?>>);

  @override
  _i3.Future<_i4.Result<_i9.Todos?>> deleteTask(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i3.Future<_i4.Result<_i9.Todos?>>.value(
            _i6.dummyValue<_i4.Result<_i9.Todos?>>(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i3.Future<_i4.Result<_i9.Todos?>>);
}
